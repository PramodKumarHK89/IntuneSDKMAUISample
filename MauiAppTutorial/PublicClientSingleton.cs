using Microsoft.Extensions.Configuration;
using Microsoft.Identity.Client;
using System;
using System.Collections.Generic;

using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace MauiAppTutorial
{
    public class PublicClientSingleton
    {
        /// <summary>
        /// This is the singleton used by Ux. Since PublicClientWrapper constructor does not have perf or memory issue, it is instantiated directly.
        /// </summary>
        public static PublicClientSingleton Instance { get; private set; } = new PublicClientSingleton();

        /// <summary>
        /// This is the configuration for the application found within the 'appsettings.json' file.
        /// </summary>
        private static IConfiguration AppConfiguration;

        /// <summary>
        /// Gets the instance of MSALClientHelper.
        /// </summary>
        public MsalClientHelper MSALClientHelper { get; }

        /// <summary>
        /// Gets the MSGraphHelper instance.
        /// </summary>
        public MSGraphHelper MSGraphHelper { get; }
        /// 
        /// <autogeneratedoc />
        /// <summary>
        /// This will determine if the Interactive Authentication should be Embedded or System view
        /// </summary>
        public bool UseEmbedded { get; set; } = false;

        //// Custom logger for sample
        //private readonly IdentityLogger _logger = new IdentityLogger();

        /// <summary>
        /// Prevents a default instance of the <see cref="PublicClientSingleton"/> class from being created. or a private constructor for singleton
        /// </summary>
        [MethodImpl(MethodImplOptions.NoInlining)]
        private PublicClientSingleton()
        {
            var assembly = Assembly.GetExecutingAssembly();
            string embeddedConfigfilename = $"{Assembly.GetCallingAssembly().GetName().Name}.appsettings.json";
            using var stream = assembly.GetManifestResourceStream(embeddedConfigfilename);
            AppConfiguration = new ConfigurationBuilder()
             .AddJsonStream(stream)
             .Build();
            AzureADConfig azureADConfig = AppConfiguration.GetSection("AzureAD").Get<AzureADConfig>();
            this.MSALClientHelper = new MsalClientHelper(azureADConfig);

            MSGraphApiConfig graphApiConfig = AppConfiguration.GetSection("MSGraphApi").Get<MSGraphApiConfig>();
            this.MSGraphHelper = new MSGraphHelper(graphApiConfig, this.MSALClientHelper);
        }
        internal string[] GetScopes()
        {
            return this.MSGraphHelper.MSGraphApiConfig.ScopesArray;
        }
        public async Task<string> AcquireTokenSilentAsync()
        {
            return await this.AcquireTokenSilentAsync(this.GetScopes()).ConfigureAwait(false);
        }
        public async Task<string> AcquireTokenSilentMAM(string resourceId)
        {
            return await this.AcquireTokenSilentAsync(new string[] { resourceId }).ConfigureAwait(false);
        }
        /// <summary>
        /// Acquire the token silently
        /// </summary>
        /// <param name="scopes">desired scopes</param>
        /// <returns>An access token</returns>
        public async Task<string> AcquireTokenSilentAsync(string[] scopes)
        {
            return await this.MSALClientHelper.SignInUserAndAcquireAccessToken(scopes).ConfigureAwait(false);
        }


        /// <summary>
        /// Signout the user and delete old GraphServiceClient
        /// </summary>
        /// <returns></returns>
        internal async Task SignOutAsync()
        {
         //   MSGraphHelper.ResetGraphClientService();
            await this.MSALClientHelper.SignOutUserAsync().ConfigureAwait(false);
        }
      
    }
}
